// Code generated by protoc-gen-go.
// source: bfgateway.proto
// DO NOT EDIT!

/*
Package bfgateway is a generated protocol buffer package.

It is generated from these files:
	bfgateway.proto

It has these top-level messages:
	BfVoid
	BfTickData
	BfTradeData
	BfOrderData
	BfPositionData
	BfAccountData
	BfErrorData
	BfLogData
	BfContractData
	BfNotificationData
	BfPingData
	BfKvData
	BfSendOrderReq
	BfSendOrderResp
	BfCancelOrderReq
	BfConnectPushReq
	BfGetContractReq
*/
package bfgateway

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 方向常量
type BfDirection int32

const (
	BfDirection_DIRECTION_UNKNOWN BfDirection = 0
	BfDirection_DIRECTION_LONG    BfDirection = 1
	BfDirection_DIRECTION_SHORT   BfDirection = 2
	BfDirection_DIRECTION_NET     BfDirection = 3
)

var BfDirection_name = map[int32]string{
	0: "DIRECTION_UNKNOWN",
	1: "DIRECTION_LONG",
	2: "DIRECTION_SHORT",
	3: "DIRECTION_NET",
}
var BfDirection_value = map[string]int32{
	"DIRECTION_UNKNOWN": 0,
	"DIRECTION_LONG":    1,
	"DIRECTION_SHORT":   2,
	"DIRECTION_NET":     3,
}

func (x BfDirection) String() string {
	return proto.EnumName(BfDirection_name, int32(x))
}
func (BfDirection) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 开平常量
//
// 如果不是上期所：
//    平今仓可用close或closeToday
//    平昨仓可用close或closeYesterday
// 如果是上期所:
//    平今仓只可用closeToday
//    平昨仓可用close或closeYesterday
// 综合：
// 平仓先平昨，用close，然后平今用closeToday
type BfOffset int32

const (
	BfOffset_OFFSET_UNKNOWN        BfOffset = 0
	BfOffset_OFFSET_OPEN           BfOffset = 1
	BfOffset_OFFSET_CLOSE          BfOffset = 2
	BfOffset_OFFSET_CLOSETODAY     BfOffset = 3
	BfOffset_OFFSET_CLOSEYESTERDAY BfOffset = 4
)

var BfOffset_name = map[int32]string{
	0: "OFFSET_UNKNOWN",
	1: "OFFSET_OPEN",
	2: "OFFSET_CLOSE",
	3: "OFFSET_CLOSETODAY",
	4: "OFFSET_CLOSEYESTERDAY",
}
var BfOffset_value = map[string]int32{
	"OFFSET_UNKNOWN":        0,
	"OFFSET_OPEN":           1,
	"OFFSET_CLOSE":          2,
	"OFFSET_CLOSETODAY":     3,
	"OFFSET_CLOSEYESTERDAY": 4,
}

func (x BfOffset) String() string {
	return proto.EnumName(BfOffset_name, int32(x))
}
func (BfOffset) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// 状态常量
type BfStatus int32

const (
	BfStatus_STATUS_UNKNOWN    BfStatus = 0
	BfStatus_STATUS_NOTTRADED  BfStatus = 1
	BfStatus_STATUS_PARTTRADED BfStatus = 2
	BfStatus_STATUS_ALLTRADED  BfStatus = 3
	BfStatus_STATUS_CANCELLED  BfStatus = 4
)

var BfStatus_name = map[int32]string{
	0: "STATUS_UNKNOWN",
	1: "STATUS_NOTTRADED",
	2: "STATUS_PARTTRADED",
	3: "STATUS_ALLTRADED",
	4: "STATUS_CANCELLED",
}
var BfStatus_value = map[string]int32{
	"STATUS_UNKNOWN":    0,
	"STATUS_NOTTRADED":  1,
	"STATUS_PARTTRADED": 2,
	"STATUS_ALLTRADED":  3,
	"STATUS_CANCELLED":  4,
}

func (x BfStatus) String() string {
	return proto.EnumName(BfStatus_name, int32(x))
}
func (BfStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// 合约类型常量
type BfProduct int32

const (
	BfProduct_PRODUCT_UNKNOWN BfProduct = 0
	BfProduct_PRODUCT_EQUITY  BfProduct = 1
	BfProduct_PRODUCT_FUTURES BfProduct = 2
)

var BfProduct_name = map[int32]string{
	0: "PRODUCT_UNKNOWN",
	1: "PRODUCT_EQUITY",
	2: "PRODUCT_FUTURES",
}
var BfProduct_value = map[string]int32{
	"PRODUCT_UNKNOWN": 0,
	"PRODUCT_EQUITY":  1,
	"PRODUCT_FUTURES": 2,
}

func (x BfProduct) String() string {
	return proto.EnumName(BfProduct_name, int32(x))
}
func (BfProduct) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// 价格类型常量
type BfPriceType int32

const (
	BfPriceType_PRICETYPE_UNKONWN     BfPriceType = 0
	BfPriceType_PRICETYPE_LIMITPRICE  BfPriceType = 1
	BfPriceType_PRICETYPE_MARKETPRICE BfPriceType = 2
)

var BfPriceType_name = map[int32]string{
	0: "PRICETYPE_UNKONWN",
	1: "PRICETYPE_LIMITPRICE",
	2: "PRICETYPE_MARKETPRICE",
}
var BfPriceType_value = map[string]int32{
	"PRICETYPE_UNKONWN":     0,
	"PRICETYPE_LIMITPRICE":  1,
	"PRICETYPE_MARKETPRICE": 2,
}

func (x BfPriceType) String() string {
	return proto.EnumName(BfPriceType_name, int32(x))
}
func (BfPriceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// Notification
type BfNotificationType int32

const (
	BfNotificationType_NOTIFICATION_UNKNOWN            BfNotificationType = 0
	BfNotificationType_NOTIFICATION_TRADEWILLBEGIN     BfNotificationType = 1
	BfNotificationType_NOTIFICATION_GOTCONTRACTS       BfNotificationType = 2
	BfNotificationType_NOTIFICATION_BEGINQUERYORDERS   BfNotificationType = 3
	BfNotificationType_NOTIFICATION_ENDQUERYORDERS     BfNotificationType = 4
	BfNotificationType_NOTIFICATION_BEGINQUERYPOSITION BfNotificationType = 5
	BfNotificationType_NOTIFICATION_ENDQUERYPOSITION   BfNotificationType = 6
)

var BfNotificationType_name = map[int32]string{
	0: "NOTIFICATION_UNKNOWN",
	1: "NOTIFICATION_TRADEWILLBEGIN",
	2: "NOTIFICATION_GOTCONTRACTS",
	3: "NOTIFICATION_BEGINQUERYORDERS",
	4: "NOTIFICATION_ENDQUERYORDERS",
	5: "NOTIFICATION_BEGINQUERYPOSITION",
	6: "NOTIFICATION_ENDQUERYPOSITION",
}
var BfNotificationType_value = map[string]int32{
	"NOTIFICATION_UNKNOWN":            0,
	"NOTIFICATION_TRADEWILLBEGIN":     1,
	"NOTIFICATION_GOTCONTRACTS":       2,
	"NOTIFICATION_BEGINQUERYORDERS":   3,
	"NOTIFICATION_ENDQUERYORDERS":     4,
	"NOTIFICATION_BEGINQUERYPOSITION": 5,
	"NOTIFICATION_ENDQUERYPOSITION":   6,
}

func (x BfNotificationType) String() string {
	return proto.EnumName(BfNotificationType_name, int32(x))
}
func (BfNotificationType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// 空参数
type BfVoid struct {
}

func (m *BfVoid) Reset()                    { *m = BfVoid{} }
func (m *BfVoid) String() string            { return proto.CompactTextString(m) }
func (*BfVoid) ProtoMessage()               {}
func (*BfVoid) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Tick行情数据类
type BfTickData struct {
	// 代码相关
	Symbol   string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Exchange string `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	// 成交数据
	ActionDate   string  `protobuf:"bytes,3,opt,name=actionDate" json:"actionDate,omitempty"`
	TickTime     string  `protobuf:"bytes,4,opt,name=tickTime" json:"tickTime,omitempty"`
	LastPrice    float64 `protobuf:"fixed64,5,opt,name=lastPrice" json:"lastPrice,omitempty"`
	Volume       int32   `protobuf:"varint,6,opt,name=volume" json:"volume,omitempty"`
	OpenInterest float64 `protobuf:"fixed64,7,opt,name=openInterest" json:"openInterest,omitempty"`
	LastVolume   int32   `protobuf:"varint,8,opt,name=lastVolume" json:"lastVolume,omitempty"`
	// 常规行情
	OpenPrice     float64 `protobuf:"fixed64,9,opt,name=openPrice" json:"openPrice,omitempty"`
	HighPrice     float64 `protobuf:"fixed64,10,opt,name=highPrice" json:"highPrice,omitempty"`
	LowPrice      float64 `protobuf:"fixed64,11,opt,name=lowPrice" json:"lowPrice,omitempty"`
	PreClosePrice float64 `protobuf:"fixed64,12,opt,name=preClosePrice" json:"preClosePrice,omitempty"`
	UpperLimit    float64 `protobuf:"fixed64,13,opt,name=upperLimit" json:"upperLimit,omitempty"`
	LowerLimit    float64 `protobuf:"fixed64,14,opt,name=lowerLimit" json:"lowerLimit,omitempty"`
	// x档行情
	BidPrice1  float64 `protobuf:"fixed64,15,opt,name=bidPrice1" json:"bidPrice1,omitempty"`
	AskPrice1  float64 `protobuf:"fixed64,16,opt,name=askPrice1" json:"askPrice1,omitempty"`
	BidVolume1 int32   `protobuf:"varint,17,opt,name=bidVolume1" json:"bidVolume1,omitempty"`
	AskVolume1 int32   `protobuf:"varint,18,opt,name=askVolume1" json:"askVolume1,omitempty"`
}

func (m *BfTickData) Reset()                    { *m = BfTickData{} }
func (m *BfTickData) String() string            { return proto.CompactTextString(m) }
func (*BfTickData) ProtoMessage()               {}
func (*BfTickData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// 成交数据类
type BfTradeData struct {
	// 代码编号相关
	Symbol   string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Exchange string `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	TradeId  string `protobuf:"bytes,3,opt,name=tradeId" json:"tradeId,omitempty"`
	// 对于ctp/lts是frontid.sessionid.orderref
	// ctp/lts的trade里面没有frontid+sessionid
	// 内部通过sysOrderId是做了映射trade到Order
	BfOrderId string `protobuf:"bytes,4,opt,name=bfOrderId" json:"bfOrderId,omitempty"`
	// 成交相关
	Direction BfDirection `protobuf:"varint,5,opt,name=direction,enum=bfgateway.BfDirection" json:"direction,omitempty"`
	Offset    BfOffset    `protobuf:"varint,6,opt,name=offset,enum=bfgateway.BfOffset" json:"offset,omitempty"`
	Price     float64     `protobuf:"fixed64,7,opt,name=price" json:"price,omitempty"`
	Volume    int32       `protobuf:"varint,8,opt,name=volume" json:"volume,omitempty"`
	TradeDate string      `protobuf:"bytes,9,opt,name=tradeDate" json:"tradeDate,omitempty"`
	TradeTime string      `protobuf:"bytes,10,opt,name=tradeTime" json:"tradeTime,omitempty"`
}

func (m *BfTradeData) Reset()                    { *m = BfTradeData{} }
func (m *BfTradeData) String() string            { return proto.CompactTextString(m) }
func (*BfTradeData) ProtoMessage()               {}
func (*BfTradeData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// 订单数据类
type BfOrderData struct {
	// 代码编号相关
	Symbol    string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Exchange  string `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	BfOrderId string `protobuf:"bytes,3,opt,name=bfOrderId" json:"bfOrderId,omitempty"`
	// 报单相关
	Direction    BfDirection `protobuf:"varint,4,opt,name=direction,enum=bfgateway.BfDirection" json:"direction,omitempty"`
	Offset       BfOffset    `protobuf:"varint,5,opt,name=offset,enum=bfgateway.BfOffset" json:"offset,omitempty"`
	Price        float64     `protobuf:"fixed64,6,opt,name=price" json:"price,omitempty"`
	TotalVolume  int32       `protobuf:"varint,7,opt,name=totalVolume" json:"totalVolume,omitempty"`
	TradedVolume int32       `protobuf:"varint,8,opt,name=tradedVolume" json:"tradedVolume,omitempty"`
	Status       BfStatus    `protobuf:"varint,9,opt,name=status,enum=bfgateway.BfStatus" json:"status,omitempty"`
	InsertDate   string      `protobuf:"bytes,10,opt,name=insertDate" json:"insertDate,omitempty"`
	InsertTime   string      `protobuf:"bytes,11,opt,name=insertTime" json:"insertTime,omitempty"`
	CancelTime   string      `protobuf:"bytes,12,opt,name=cancelTime" json:"cancelTime,omitempty"`
}

func (m *BfOrderData) Reset()                    { *m = BfOrderData{} }
func (m *BfOrderData) String() string            { return proto.CompactTextString(m) }
func (*BfOrderData) ProtoMessage()               {}
func (*BfOrderData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// 持仓数据类
// queryposition会返回多个positiondata
// 需要对这些做累加合并，key=symbol+exchange+direction
type BfPositionData struct {
	// 代码编号相关
	Symbol   string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Exchange string `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	// 持仓相关
	Direction  BfDirection `protobuf:"varint,3,opt,name=direction,enum=bfgateway.BfDirection" json:"direction,omitempty"`
	Position   int32       `protobuf:"varint,4,opt,name=position" json:"position,omitempty"`
	Frozen     int32       `protobuf:"varint,5,opt,name=frozen" json:"frozen,omitempty"`
	Price      float64     `protobuf:"fixed64,6,opt,name=price" json:"price,omitempty"`
	YdPosition int32       `protobuf:"varint,7,opt,name=ydPosition" json:"ydPosition,omitempty"`
}

func (m *BfPositionData) Reset()                    { *m = BfPositionData{} }
func (m *BfPositionData) String() string            { return proto.CompactTextString(m) }
func (*BfPositionData) ProtoMessage()               {}
func (*BfPositionData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// 账户数据类
type BfAccountData struct {
	// 账号代码相关
	AccountId string `protobuf:"bytes,1,opt,name=accountId" json:"accountId,omitempty"`
	// 数值相关
	PreBalance     float64 `protobuf:"fixed64,2,opt,name=preBalance" json:"preBalance,omitempty"`
	Balance        float64 `protobuf:"fixed64,3,opt,name=balance" json:"balance,omitempty"`
	Available      float64 `protobuf:"fixed64,4,opt,name=available" json:"available,omitempty"`
	Commission     float64 `protobuf:"fixed64,5,opt,name=commission" json:"commission,omitempty"`
	FrozenMargin   float64 `protobuf:"fixed64,6,opt,name=frozenMargin" json:"frozenMargin,omitempty"`
	CloseProfit    float64 `protobuf:"fixed64,7,opt,name=closeProfit" json:"closeProfit,omitempty"`
	PositionProfit float64 `protobuf:"fixed64,8,opt,name=positionProfit" json:"positionProfit,omitempty"`
}

func (m *BfAccountData) Reset()                    { *m = BfAccountData{} }
func (m *BfAccountData) String() string            { return proto.CompactTextString(m) }
func (*BfAccountData) ProtoMessage()               {}
func (*BfAccountData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// 错误数据类
type BfErrorData struct {
	Code      int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	MessageEx string `protobuf:"bytes,3,opt,name=messageEx" json:"messageEx,omitempty"`
}

func (m *BfErrorData) Reset()                    { *m = BfErrorData{} }
func (m *BfErrorData) String() string            { return proto.CompactTextString(m) }
func (*BfErrorData) ProtoMessage()               {}
func (*BfErrorData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// 日志数据类
type BfLogData struct {
	When    string `protobuf:"bytes,1,opt,name=when" json:"when,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *BfLogData) Reset()                    { *m = BfLogData{} }
func (m *BfLogData) String() string            { return proto.CompactTextString(m) }
func (*BfLogData) ProtoMessage()               {}
func (*BfLogData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// 合约详细信息类
type BfContractData struct {
	// 代码编号相关
	Symbol   string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Exchange string `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	// TODO(hege):utf8
	Name           string    `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	ProductClass   BfProduct `protobuf:"varint,4,opt,name=productClass,enum=bfgateway.BfProduct" json:"productClass,omitempty"`
	VolumeMultiple int32     `protobuf:"varint,5,opt,name=volumeMultiple" json:"volumeMultiple,omitempty"`
	PriceTick      float64   `protobuf:"fixed64,6,opt,name=priceTick" json:"priceTick,omitempty"`
	MaxLimit       int32     `protobuf:"varint,7,opt,name=maxLimit" json:"maxLimit,omitempty"`
	MinLimit       int32     `protobuf:"varint,8,opt,name=minLimit" json:"minLimit,omitempty"`
	MaxMarket      int32     `protobuf:"varint,9,opt,name=maxMarket" json:"maxMarket,omitempty"`
	MinMarket      int32     `protobuf:"varint,10,opt,name=minMarket" json:"minMarket,omitempty"`
}

func (m *BfContractData) Reset()                    { *m = BfContractData{} }
func (m *BfContractData) String() string            { return proto.CompactTextString(m) }
func (*BfContractData) ProtoMessage()               {}
func (*BfContractData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// Notification
type BfNotificationData struct {
	Type      BfNotificationType `protobuf:"varint,1,opt,name=type,enum=bfgateway.BfNotificationType" json:"type,omitempty"`
	Code      int32              `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message   string             `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	MessageEx string             `protobuf:"bytes,4,opt,name=messageEx" json:"messageEx,omitempty"`
}

func (m *BfNotificationData) Reset()                    { *m = BfNotificationData{} }
func (m *BfNotificationData) String() string            { return proto.CompactTextString(m) }
func (*BfNotificationData) ProtoMessage()               {}
func (*BfNotificationData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// Ping/Pong检测传入的对象类
// 同ctp一样，5秒一次
type BfPingData struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *BfPingData) Reset()                    { *m = BfPingData{} }
func (m *BfPingData) String() string            { return proto.CompactTextString(m) }
func (*BfPingData) ProtoMessage()               {}
func (*BfPingData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

// K/V数据交换传入传出的数据类
// 策略间交换数据服务
// 由于涉及交易，交易又分实盘和回测，所以放到网关比较合适
type BfKvData struct {
	// kv对
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *BfKvData) Reset()                    { *m = BfKvData{} }
func (m *BfKvData) String() string            { return proto.CompactTextString(m) }
func (*BfKvData) ProtoMessage()               {}
func (*BfKvData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

// 发单时传入的对象类
type BfSendOrderReq struct {
	// 代码编号相关
	Symbol    string      `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Exchange  string      `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	Price     float64     `protobuf:"fixed64,3,opt,name=price" json:"price,omitempty"`
	Volume    int32       `protobuf:"varint,4,opt,name=volume" json:"volume,omitempty"`
	PriceType BfPriceType `protobuf:"varint,5,opt,name=priceType,enum=bfgateway.BfPriceType" json:"priceType,omitempty"`
	Direction BfDirection `protobuf:"varint,6,opt,name=direction,enum=bfgateway.BfDirection" json:"direction,omitempty"`
	Offset    BfOffset    `protobuf:"varint,7,opt,name=offset,enum=bfgateway.BfOffset" json:"offset,omitempty"`
}

func (m *BfSendOrderReq) Reset()                    { *m = BfSendOrderReq{} }
func (m *BfSendOrderReq) String() string            { return proto.CompactTextString(m) }
func (*BfSendOrderReq) ProtoMessage()               {}
func (*BfSendOrderReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

// 发单本地返回的对象类
type BfSendOrderResp struct {
	BfOrderId string `protobuf:"bytes,1,opt,name=bfOrderId" json:"bfOrderId,omitempty"`
}

func (m *BfSendOrderResp) Reset()                    { *m = BfSendOrderResp{} }
func (m *BfSendOrderResp) String() string            { return proto.CompactTextString(m) }
func (*BfSendOrderResp) ProtoMessage()               {}
func (*BfSendOrderResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

// 撤单时传入的对象类
type BfCancelOrderReq struct {
	// 代码编号相关
	Symbol    string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Exchange  string `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	BfOrderId string `protobuf:"bytes,3,opt,name=bfOrderId" json:"bfOrderId,omitempty"`
}

func (m *BfCancelOrderReq) Reset()                    { *m = BfCancelOrderReq{} }
func (m *BfCancelOrderReq) String() string            { return proto.CompactTextString(m) }
func (*BfCancelOrderReq) ProtoMessage()               {}
func (*BfCancelOrderReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

// 连接时传入的对象类
type BfConnectPushReq struct {
	// 代号
	ClientId string `protobuf:"bytes,1,opt,name=clientId" json:"clientId,omitempty"`
	// 角色类别，可多选
	// 注意：OnNotification OnPing都会收到
	TickHandler  bool `protobuf:"varint,2,opt,name=tickHandler" json:"tickHandler,omitempty"`
	TradeHandler bool `protobuf:"varint,3,opt,name=tradeHandler" json:"tradeHandler,omitempty"`
	LogHandler   bool `protobuf:"varint,4,opt,name=logHandler" json:"logHandler,omitempty"`
	// tickHandler相关
	Symbol   string `protobuf:"bytes,5,opt,name=symbol" json:"symbol,omitempty"`
	Exchange string `protobuf:"bytes,6,opt,name=exchange" json:"exchange,omitempty"`
}

func (m *BfConnectPushReq) Reset()                    { *m = BfConnectPushReq{} }
func (m *BfConnectPushReq) String() string            { return proto.CompactTextString(m) }
func (*BfConnectPushReq) ProtoMessage()               {}
func (*BfConnectPushReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

// 获取合约信息传入的对象类
type BfGetContractReq struct {
	// 代码编号相关
	Symbol   string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Exchange string `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
}

func (m *BfGetContractReq) Reset()                    { *m = BfGetContractReq{} }
func (m *BfGetContractReq) String() string            { return proto.CompactTextString(m) }
func (*BfGetContractReq) ProtoMessage()               {}
func (*BfGetContractReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func init() {
	proto.RegisterType((*BfVoid)(nil), "bfgateway.BfVoid")
	proto.RegisterType((*BfTickData)(nil), "bfgateway.BfTickData")
	proto.RegisterType((*BfTradeData)(nil), "bfgateway.BfTradeData")
	proto.RegisterType((*BfOrderData)(nil), "bfgateway.BfOrderData")
	proto.RegisterType((*BfPositionData)(nil), "bfgateway.BfPositionData")
	proto.RegisterType((*BfAccountData)(nil), "bfgateway.BfAccountData")
	proto.RegisterType((*BfErrorData)(nil), "bfgateway.BfErrorData")
	proto.RegisterType((*BfLogData)(nil), "bfgateway.BfLogData")
	proto.RegisterType((*BfContractData)(nil), "bfgateway.BfContractData")
	proto.RegisterType((*BfNotificationData)(nil), "bfgateway.BfNotificationData")
	proto.RegisterType((*BfPingData)(nil), "bfgateway.BfPingData")
	proto.RegisterType((*BfKvData)(nil), "bfgateway.BfKvData")
	proto.RegisterType((*BfSendOrderReq)(nil), "bfgateway.BfSendOrderReq")
	proto.RegisterType((*BfSendOrderResp)(nil), "bfgateway.BfSendOrderResp")
	proto.RegisterType((*BfCancelOrderReq)(nil), "bfgateway.BfCancelOrderReq")
	proto.RegisterType((*BfConnectPushReq)(nil), "bfgateway.BfConnectPushReq")
	proto.RegisterType((*BfGetContractReq)(nil), "bfgateway.BfGetContractReq")
	proto.RegisterEnum("bfgateway.BfDirection", BfDirection_name, BfDirection_value)
	proto.RegisterEnum("bfgateway.BfOffset", BfOffset_name, BfOffset_value)
	proto.RegisterEnum("bfgateway.BfStatus", BfStatus_name, BfStatus_value)
	proto.RegisterEnum("bfgateway.BfProduct", BfProduct_name, BfProduct_value)
	proto.RegisterEnum("bfgateway.BfPriceType", BfPriceType_name, BfPriceType_value)
	proto.RegisterEnum("bfgateway.BfNotificationType", BfNotificationType_name, BfNotificationType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for BfGatewayService service

type BfGatewayServiceClient interface {
	// 活跃检测
	Ping(ctx context.Context, in *BfPingData, opts ...grpc.CallOption) (*BfPingData, error)
	// 开始/停止接收推送
	// 1 接收异步调用的结果，如QueryAccount QueryPosition等
	// 2 接收服务端的主动推送，如tick log notification等
	ConnectPush(ctx context.Context, in *BfConnectPushReq, opts ...grpc.CallOption) (BfGatewayService_ConnectPushClient, error)
	DisconnectPush(ctx context.Context, in *BfVoid, opts ...grpc.CallOption) (*BfVoid, error)
	// 获取交易合约信息，支持*获取全部订阅合约
	GetContract(ctx context.Context, in *BfGetContractReq, opts ...grpc.CallOption) (BfGatewayService_GetContractClient, error)
	// 发单
	SendOrder(ctx context.Context, in *BfSendOrderReq, opts ...grpc.CallOption) (*BfSendOrderResp, error)
	// 撤单
	CancelOrder(ctx context.Context, in *BfCancelOrderReq, opts ...grpc.CallOption) (*BfVoid, error)
	// 查询账户信息
	QueryAccount(ctx context.Context, in *BfVoid, opts ...grpc.CallOption) (*BfVoid, error)
	// 查询持仓信息
	QueryPosition(ctx context.Context, in *BfVoid, opts ...grpc.CallOption) (*BfVoid, error)
	// 查询挂单信息
	QueryOrders(ctx context.Context, in *BfVoid, opts ...grpc.CallOption) (*BfVoid, error)
}

type bfGatewayServiceClient struct {
	cc *grpc.ClientConn
}

func NewBfGatewayServiceClient(cc *grpc.ClientConn) BfGatewayServiceClient {
	return &bfGatewayServiceClient{cc}
}

func (c *bfGatewayServiceClient) Ping(ctx context.Context, in *BfPingData, opts ...grpc.CallOption) (*BfPingData, error) {
	out := new(BfPingData)
	err := grpc.Invoke(ctx, "/bfgateway.BfGatewayService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfGatewayServiceClient) ConnectPush(ctx context.Context, in *BfConnectPushReq, opts ...grpc.CallOption) (BfGatewayService_ConnectPushClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BfGatewayService_serviceDesc.Streams[0], c.cc, "/bfgateway.BfGatewayService/ConnectPush", opts...)
	if err != nil {
		return nil, err
	}
	x := &bfGatewayServiceConnectPushClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BfGatewayService_ConnectPushClient interface {
	Recv() (*google_protobuf.Any, error)
	grpc.ClientStream
}

type bfGatewayServiceConnectPushClient struct {
	grpc.ClientStream
}

func (x *bfGatewayServiceConnectPushClient) Recv() (*google_protobuf.Any, error) {
	m := new(google_protobuf.Any)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bfGatewayServiceClient) DisconnectPush(ctx context.Context, in *BfVoid, opts ...grpc.CallOption) (*BfVoid, error) {
	out := new(BfVoid)
	err := grpc.Invoke(ctx, "/bfgateway.BfGatewayService/DisconnectPush", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfGatewayServiceClient) GetContract(ctx context.Context, in *BfGetContractReq, opts ...grpc.CallOption) (BfGatewayService_GetContractClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BfGatewayService_serviceDesc.Streams[1], c.cc, "/bfgateway.BfGatewayService/GetContract", opts...)
	if err != nil {
		return nil, err
	}
	x := &bfGatewayServiceGetContractClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BfGatewayService_GetContractClient interface {
	Recv() (*BfContractData, error)
	grpc.ClientStream
}

type bfGatewayServiceGetContractClient struct {
	grpc.ClientStream
}

func (x *bfGatewayServiceGetContractClient) Recv() (*BfContractData, error) {
	m := new(BfContractData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bfGatewayServiceClient) SendOrder(ctx context.Context, in *BfSendOrderReq, opts ...grpc.CallOption) (*BfSendOrderResp, error) {
	out := new(BfSendOrderResp)
	err := grpc.Invoke(ctx, "/bfgateway.BfGatewayService/SendOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfGatewayServiceClient) CancelOrder(ctx context.Context, in *BfCancelOrderReq, opts ...grpc.CallOption) (*BfVoid, error) {
	out := new(BfVoid)
	err := grpc.Invoke(ctx, "/bfgateway.BfGatewayService/CancelOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfGatewayServiceClient) QueryAccount(ctx context.Context, in *BfVoid, opts ...grpc.CallOption) (*BfVoid, error) {
	out := new(BfVoid)
	err := grpc.Invoke(ctx, "/bfgateway.BfGatewayService/QueryAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfGatewayServiceClient) QueryPosition(ctx context.Context, in *BfVoid, opts ...grpc.CallOption) (*BfVoid, error) {
	out := new(BfVoid)
	err := grpc.Invoke(ctx, "/bfgateway.BfGatewayService/QueryPosition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfGatewayServiceClient) QueryOrders(ctx context.Context, in *BfVoid, opts ...grpc.CallOption) (*BfVoid, error) {
	out := new(BfVoid)
	err := grpc.Invoke(ctx, "/bfgateway.BfGatewayService/QueryOrders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BfGatewayService service

type BfGatewayServiceServer interface {
	// 活跃检测
	Ping(context.Context, *BfPingData) (*BfPingData, error)
	// 开始/停止接收推送
	// 1 接收异步调用的结果，如QueryAccount QueryPosition等
	// 2 接收服务端的主动推送，如tick log notification等
	ConnectPush(*BfConnectPushReq, BfGatewayService_ConnectPushServer) error
	DisconnectPush(context.Context, *BfVoid) (*BfVoid, error)
	// 获取交易合约信息，支持*获取全部订阅合约
	GetContract(*BfGetContractReq, BfGatewayService_GetContractServer) error
	// 发单
	SendOrder(context.Context, *BfSendOrderReq) (*BfSendOrderResp, error)
	// 撤单
	CancelOrder(context.Context, *BfCancelOrderReq) (*BfVoid, error)
	// 查询账户信息
	QueryAccount(context.Context, *BfVoid) (*BfVoid, error)
	// 查询持仓信息
	QueryPosition(context.Context, *BfVoid) (*BfVoid, error)
	// 查询挂单信息
	QueryOrders(context.Context, *BfVoid) (*BfVoid, error)
}

func RegisterBfGatewayServiceServer(s *grpc.Server, srv BfGatewayServiceServer) {
	s.RegisterService(&_BfGatewayService_serviceDesc, srv)
}

func _BfGatewayService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BfPingData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfGatewayServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfgateway.BfGatewayService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfGatewayServiceServer).Ping(ctx, req.(*BfPingData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfGatewayService_ConnectPush_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BfConnectPushReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BfGatewayServiceServer).ConnectPush(m, &bfGatewayServiceConnectPushServer{stream})
}

type BfGatewayService_ConnectPushServer interface {
	Send(*google_protobuf.Any) error
	grpc.ServerStream
}

type bfGatewayServiceConnectPushServer struct {
	grpc.ServerStream
}

func (x *bfGatewayServiceConnectPushServer) Send(m *google_protobuf.Any) error {
	return x.ServerStream.SendMsg(m)
}

func _BfGatewayService_DisconnectPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BfVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfGatewayServiceServer).DisconnectPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfgateway.BfGatewayService/DisconnectPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfGatewayServiceServer).DisconnectPush(ctx, req.(*BfVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfGatewayService_GetContract_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BfGetContractReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BfGatewayServiceServer).GetContract(m, &bfGatewayServiceGetContractServer{stream})
}

type BfGatewayService_GetContractServer interface {
	Send(*BfContractData) error
	grpc.ServerStream
}

type bfGatewayServiceGetContractServer struct {
	grpc.ServerStream
}

func (x *bfGatewayServiceGetContractServer) Send(m *BfContractData) error {
	return x.ServerStream.SendMsg(m)
}

func _BfGatewayService_SendOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BfSendOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfGatewayServiceServer).SendOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfgateway.BfGatewayService/SendOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfGatewayServiceServer).SendOrder(ctx, req.(*BfSendOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfGatewayService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BfCancelOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfGatewayServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfgateway.BfGatewayService/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfGatewayServiceServer).CancelOrder(ctx, req.(*BfCancelOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfGatewayService_QueryAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BfVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfGatewayServiceServer).QueryAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfgateway.BfGatewayService/QueryAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfGatewayServiceServer).QueryAccount(ctx, req.(*BfVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfGatewayService_QueryPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BfVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfGatewayServiceServer).QueryPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfgateway.BfGatewayService/QueryPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfGatewayServiceServer).QueryPosition(ctx, req.(*BfVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfGatewayService_QueryOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BfVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfGatewayServiceServer).QueryOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfgateway.BfGatewayService/QueryOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfGatewayServiceServer).QueryOrders(ctx, req.(*BfVoid))
	}
	return interceptor(ctx, in, info, handler)
}

var _BfGatewayService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bfgateway.BfGatewayService",
	HandlerType: (*BfGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _BfGatewayService_Ping_Handler,
		},
		{
			MethodName: "DisconnectPush",
			Handler:    _BfGatewayService_DisconnectPush_Handler,
		},
		{
			MethodName: "SendOrder",
			Handler:    _BfGatewayService_SendOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _BfGatewayService_CancelOrder_Handler,
		},
		{
			MethodName: "QueryAccount",
			Handler:    _BfGatewayService_QueryAccount_Handler,
		},
		{
			MethodName: "QueryPosition",
			Handler:    _BfGatewayService_QueryPosition_Handler,
		},
		{
			MethodName: "QueryOrders",
			Handler:    _BfGatewayService_QueryOrders_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectPush",
			Handler:       _BfGatewayService_ConnectPush_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetContract",
			Handler:       _BfGatewayService_GetContract_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 1675 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x58, 0xcb, 0x72, 0xdb, 0xc6,
	0x12, 0x35, 0x9f, 0x22, 0x87, 0x12, 0x45, 0xc1, 0xb2, 0x8b, 0xa2, 0xaf, 0xaf, 0x7d, 0x71, 0x6f,
	0xf9, 0x26, 0x4a, 0x95, 0x14, 0x2b, 0x8e, 0x93, 0xac, 0x52, 0x7c, 0x40, 0x32, 0xca, 0x14, 0x41,
	0x83, 0x90, 0x5d, 0xca, 0x26, 0x01, 0xc1, 0x01, 0x85, 0x12, 0x08, 0x30, 0x00, 0xa8, 0x47, 0x7e,
	0x21, 0x4b, 0x7f, 0x46, 0x36, 0xf9, 0x88, 0x54, 0x2a, 0x8b, 0x7c, 0x46, 0xbe, 0x22, 0xab, 0xcc,
	0xf4, 0x0c, 0x1e, 0x43, 0x4b, 0x8e, 0xac, 0xec, 0x38, 0xe7, 0xf4, 0xf4, 0x4c, 0x9f, 0xee, 0xe9,
	0x46, 0x11, 0xad, 0x8f, 0xed, 0xa9, 0x19, 0xe1, 0x73, 0xf3, 0x72, 0x67, 0x1e, 0xf8, 0x91, 0x2f,
	0x55, 0x13, 0xa0, 0xb5, 0x35, 0xf5, 0xfd, 0xa9, 0x8b, 0x77, 0x81, 0x18, 0x2f, 0xec, 0x5d, 0xd3,
	0xe3, 0x56, 0x72, 0x05, 0x95, 0x3b, 0xf6, 0x6b, 0xdf, 0x99, 0xc8, 0x3f, 0x17, 0x11, 0xea, 0xd8,
	0x86, 0x63, 0x9d, 0xf6, 0xcc, 0xc8, 0x94, 0xee, 0xa3, 0x72, 0x78, 0x39, 0x1b, 0xfb, 0x6e, 0x33,
	0xf7, 0x38, 0xf7, 0x51, 0x55, 0xe7, 0x2b, 0xa9, 0x85, 0x2a, 0xf8, 0xc2, 0x3a, 0x31, 0xbd, 0x29,
	0x6e, 0xe6, 0x81, 0x49, 0xd6, 0xd2, 0xbf, 0x11, 0x32, 0xad, 0xc8, 0xf1, 0x3d, 0xe2, 0x01, 0x37,
	0x0b, 0xc0, 0x66, 0x10, 0xba, 0x37, 0x22, 0xfe, 0x0d, 0x67, 0x86, 0x9b, 0x45, 0xb6, 0x37, 0x5e,
	0x4b, 0xff, 0x42, 0x55, 0xd7, 0x0c, 0xa3, 0x61, 0xe0, 0x58, 0xb8, 0x59, 0x22, 0x64, 0x4e, 0x4f,
	0x01, 0x7a, 0x9b, 0x33, 0xdf, 0x5d, 0x90, 0x7d, 0x65, 0x42, 0x95, 0x74, 0xbe, 0x92, 0x64, 0xb4,
	0xea, 0xcf, 0xb1, 0xa7, 0x7a, 0x11, 0x0e, 0x70, 0x18, 0x35, 0x57, 0x60, 0xa3, 0x80, 0xd1, 0x5b,
	0x51, 0x47, 0xaf, 0xd9, 0xfe, 0x0a, 0xec, 0xcf, 0x20, 0xf4, 0x64, 0x6a, 0xcf, 0x4e, 0xae, 0xb2,
	0x93, 0x13, 0x80, 0xb2, 0x27, 0xce, 0xf4, 0x84, 0xb1, 0x88, 0xb1, 0x09, 0x40, 0x23, 0x72, 0xfd,
	0x73, 0x46, 0xd6, 0x80, 0x4c, 0xd6, 0xd2, 0xff, 0xd0, 0xda, 0x3c, 0xc0, 0x5d, 0xd7, 0x0f, 0x31,
	0x33, 0x58, 0x05, 0x03, 0x11, 0xa4, 0xb7, 0x5b, 0xcc, 0xe7, 0x38, 0xe8, 0x3b, 0x33, 0x27, 0x6a,
	0xae, 0x81, 0x49, 0x06, 0x81, 0xdb, 0xfb, 0xe7, 0x31, 0x5f, 0x67, 0x7c, 0x8a, 0xd0, 0xfb, 0x8d,
	0x9d, 0x09, 0xf8, 0x7a, 0xda, 0x5c, 0x67, 0xf7, 0x4b, 0x00, 0xca, 0x9a, 0xe1, 0x29, 0x67, 0x1b,
	0x8c, 0x4d, 0x00, 0xea, 0x9b, 0x98, 0x32, 0x19, 0x9e, 0x36, 0x37, 0x98, 0x32, 0x29, 0x02, 0xf9,
	0x0c, 0x4f, 0x63, 0x5e, 0x62, 0x7c, 0x8a, 0xc8, 0xbf, 0xe6, 0x51, 0x8d, 0x94, 0x4c, 0x60, 0x4e,
	0xf0, 0xad, 0x6b, 0xa6, 0x89, 0x56, 0x22, 0xea, 0x40, 0x9d, 0xf0, 0x82, 0x89, 0x97, 0x10, 0x99,
	0xad, 0x05, 0x13, 0x1c, 0x10, 0x8e, 0x95, 0x4b, 0x0a, 0x48, 0xcf, 0x50, 0x75, 0xe2, 0x04, 0x18,
	0x8a, 0x0b, 0xea, 0xa5, 0xbe, 0x77, 0x7f, 0x27, 0x7d, 0x03, 0x1d, 0xbb, 0x17, 0xb3, 0x7a, 0x6a,
	0x28, 0x7d, 0x82, 0xca, 0xbe, 0x6d, 0x87, 0x38, 0x82, 0x3a, 0xaa, 0xef, 0xdd, 0x15, 0xb6, 0x68,
	0x40, 0xe9, 0xdc, 0x44, 0xda, 0x44, 0xa5, 0x39, 0x24, 0x8e, 0x55, 0x15, 0x5b, 0x64, 0x4a, 0xb1,
	0x22, 0x94, 0x22, 0xb9, 0x6e, 0xc4, 0x95, 0x60, 0x65, 0x44, 0xae, 0x9b, 0x00, 0x09, 0x0b, 0xb5,
	0x8f, 0x32, 0x2c, 0x05, 0xe4, 0x9f, 0x0a, 0x54, 0x48, 0x08, 0xed, 0xd6, 0x42, 0x0a, 0x72, 0x15,
	0xde, 0x2b, 0x57, 0xf1, 0xc3, 0xe5, 0x2a, 0x7d, 0x80, 0x5c, 0xe5, 0xac, 0x5c, 0x8f, 0x51, 0x2d,
	0xf2, 0x23, 0xd3, 0xe5, 0xcf, 0x6f, 0x05, 0x34, 0xcb, 0x42, 0xf4, 0x0d, 0x83, 0x12, 0x13, 0xe1,
	0x85, 0x0a, 0x18, 0xbd, 0x48, 0x18, 0x99, 0xd1, 0x22, 0x04, 0x65, 0x97, 0x2f, 0x32, 0x02, 0x4a,
	0xe7, 0x26, 0xb4, 0x6c, 0x1d, 0x2f, 0xc4, 0x41, 0x04, 0xa9, 0x60, 0x62, 0x67, 0x90, 0x94, 0x87,
	0x64, 0xd4, 0xb2, 0x3c, 0xb4, 0x22, 0xc2, 0x5b, 0xa6, 0x67, 0x61, 0x17, 0xf8, 0x55, 0xc6, 0xa7,
	0x88, 0xfc, 0x47, 0x0e, 0xd5, 0x3b, 0xf6, 0xd0, 0x0f, 0x1d, 0xde, 0xd9, 0x6e, 0x97, 0x30, 0x21,
	0x25, 0x85, 0x9b, 0xa6, 0x84, 0x78, 0x9c, 0xf3, 0x93, 0x21, 0x8f, 0x25, 0x3d, 0x59, 0xd3, 0x5b,
	0xd8, 0x81, 0xff, 0x03, 0x66, 0x0f, 0x82, 0x94, 0x26, 0x5b, 0x5d, 0x93, 0x19, 0x12, 0xe6, 0xe5,
	0x24, 0x8e, 0x82, 0x27, 0x26, 0x83, 0xc8, 0x6f, 0xf3, 0x68, 0xad, 0x63, 0xb7, 0x2d, 0xcb, 0x5f,
	0x78, 0x11, 0x44, 0x49, 0xbb, 0x09, 0x5b, 0x92, 0x12, 0x63, 0x81, 0xa6, 0x00, 0xf5, 0x47, 0x5a,
	0x5b, 0xc7, 0x74, 0xa9, 0x52, 0x10, 0x2d, 0xe9, 0x54, 0x29, 0x42, 0x5f, 0xfa, 0x98, 0x93, 0x05,
	0x20, 0xe3, 0x25, 0xf8, 0x3d, 0x33, 0x1d, 0xd7, 0x1c, 0xbb, 0x6c, 0x30, 0xd0, 0x2e, 0x15, 0x03,
	0x90, 0x0e, 0x7f, 0x36, 0x73, 0xc2, 0x30, 0x7e, 0xea, 0xc4, 0x6f, 0x8a, 0xd0, 0xfa, 0x61, 0x71,
	0x1e, 0x9a, 0xc1, 0xd4, 0xf1, 0x78, 0x90, 0x02, 0x46, 0xab, 0xd0, 0x62, 0x3d, 0xd7, 0xb7, 0x9d,
	0x78, 0x4c, 0x64, 0x21, 0xe9, 0x09, 0xaa, 0xc7, 0x3a, 0x72, 0xa3, 0x0a, 0x18, 0x2d, 0xa1, 0xf2,
	0x31, 0x7d, 0xa9, 0x4a, 0x10, 0xf8, 0xec, 0xa5, 0x4a, 0xa8, 0x68, 0xf9, 0x13, 0x0c, 0x6a, 0x94,
	0x74, 0xf8, 0x4d, 0x03, 0x9d, 0xe1, 0x30, 0x34, 0x93, 0x9c, 0xc7, 0x4b, 0x1a, 0x28, 0xff, 0xa9,
	0x5c, 0xc4, 0x6f, 0x34, 0x01, 0xe4, 0xaf, 0x50, 0xb5, 0x63, 0xf7, 0xfd, 0x69, 0xec, 0xf8, 0xfc,
	0x84, 0x64, 0x92, 0xc9, 0x0c, 0xbf, 0xaf, 0x77, 0x2c, 0xff, 0x9e, 0xa7, 0x25, 0xd9, 0xf5, 0x3d,
	0xf2, 0x6a, 0xac, 0xe8, 0xd6, 0x25, 0x49, 0x0e, 0xf5, 0xcc, 0x59, 0x3c, 0xba, 0xe1, 0xb7, 0xf4,
	0x25, 0x5a, 0x25, 0x9f, 0x0a, 0x93, 0x85, 0x15, 0x75, 0xc9, 0xd0, 0x0c, 0x79, 0xf3, 0xd8, 0x14,
	0x2a, 0x75, 0xc8, 0x0c, 0x74, 0xc1, 0x92, 0x4a, 0xca, 0x7a, 0xe3, 0xe1, 0xc2, 0x8d, 0x9c, 0xb9,
	0x8b, 0x79, 0x59, 0x2e, 0xa1, 0x54, 0x15, 0xa8, 0x48, 0xfa, 0xed, 0xc1, 0xb3, 0x97, 0x02, 0xf4,
	0xbe, 0x33, 0xf3, 0x82, 0x8d, 0x3f, 0x56, 0xa4, 0xc9, 0x1a, 0x38, 0xc7, 0x63, 0x5c, 0x85, 0x73,
	0x7c, 0x0d, 0x5a, 0x9b, 0x17, 0x24, 0xff, 0xa7, 0xa4, 0x7d, 0x55, 0x81, 0x4c, 0x01, 0x60, 0x1d,
	0x8f, 0xb3, 0x88, 0xb3, 0x31, 0x20, 0xbf, 0xcd, 0x21, 0xa9, 0x63, 0x0f, 0xfc, 0xc8, 0xb1, 0x1d,
	0xcb, 0x4c, 0x5e, 0xf9, 0x53, 0x54, 0x8c, 0x2e, 0xe7, 0x2c, 0xd9, 0xf5, 0xbd, 0x87, 0x82, 0x04,
	0x59, 0x63, 0x83, 0x18, 0xe9, 0x60, 0x9a, 0xd4, 0x47, 0xfe, 0xea, 0xfa, 0x28, 0xbc, 0xa7, 0x3e,
	0x8a, 0xcb, 0xf5, 0xf1, 0x84, 0x7e, 0xa0, 0x0d, 0x1d, 0x8f, 0x15, 0x48, 0xc6, 0x4b, 0x4e, 0x2c,
	0x86, 0x3d, 0x54, 0xe9, 0xd8, 0x2f, 0xcf, 0xc0, 0xaa, 0x81, 0x0a, 0xa7, 0xf8, 0x92, 0x5b, 0xd0,
	0x9f, 0xb4, 0x19, 0x9c, 0x99, 0xee, 0x22, 0x4e, 0x3e, 0x5b, 0xc8, 0x3f, 0x42, 0x01, 0x8d, 0xb0,
	0x37, 0x81, 0x89, 0xa1, 0xe3, 0xef, 0x6f, 0x55, 0x40, 0x49, 0xa7, 0x29, 0x5c, 0x3d, 0x32, 0x8b,
	0xc2, 0xc8, 0x7c, 0x16, 0x27, 0x9e, 0x8a, 0x7a, 0xd5, 0x0c, 0x1f, 0xc6, 0xac, 0x9e, 0x1a, 0x8a,
	0x7d, 0xb3, 0xfc, 0xe1, 0xa3, 0x6c, 0xe5, 0x6f, 0x47, 0x99, 0xbc, 0x8b, 0xd6, 0x05, 0x31, 0xc2,
	0xb9, 0x38, 0x5e, 0x73, 0x4b, 0xe3, 0x55, 0x9e, 0xa0, 0x06, 0x79, 0x7e, 0x30, 0x22, 0xfe, 0x91,
	0x7e, 0xef, 0x1d, 0xe2, 0xf2, 0x6f, 0x39, 0x38, 0xc6, 0xf7, 0x3c, 0x12, 0xd4, 0x70, 0x11, 0x9e,
	0xd0, 0x63, 0x88, 0x3b, 0xcb, 0x75, 0x70, 0xa6, 0x27, 0x27, 0x6b, 0x18, 0xbe, 0xe4, 0x0d, 0xbd,
	0x30, 0xbd, 0x89, 0x8b, 0x03, 0x38, 0xad, 0xa2, 0x67, 0xa1, 0x64, 0xf8, 0xc6, 0x26, 0x05, 0x30,
	0x11, 0x30, 0xf6, 0x09, 0x3a, 0x8d, 0x2d, 0x8a, 0x60, 0x91, 0x41, 0x32, 0x81, 0x96, 0xae, 0x0d,
	0xb4, 0x2c, 0x06, 0x2a, 0xef, 0xd3, 0x48, 0x0e, 0x70, 0x14, 0xb7, 0xac, 0x5b, 0x0a, 0xb6, 0xfd,
	0x1d, 0x6d, 0xc7, 0x49, 0xc2, 0xa5, 0x7b, 0x68, 0xa3, 0xa7, 0xea, 0x4a, 0xd7, 0x50, 0xb5, 0xc1,
	0xb7, 0x47, 0x83, 0x97, 0x03, 0xed, 0xcd, 0xa0, 0x71, 0x87, 0xbc, 0xc2, 0x7a, 0x0a, 0xf7, 0xb5,
	0xc1, 0x41, 0x23, 0x27, 0xdd, 0x45, 0xeb, 0x29, 0x36, 0x7a, 0xa1, 0xe9, 0x46, 0x23, 0x2f, 0x6d,
	0xa0, 0xb5, 0x14, 0x1c, 0x28, 0x46, 0xa3, 0xb0, 0x1d, 0xd2, 0xd7, 0xc4, 0xea, 0x83, 0xfa, 0xd1,
	0xf6, 0xf7, 0x47, 0x8a, 0x91, 0xf1, 0xbd, 0x8e, 0x6a, 0x1c, 0xd3, 0x86, 0xca, 0x80, 0x38, 0x6e,
	0xa0, 0x55, 0x0e, 0x74, 0xfb, 0xda, 0x48, 0x21, 0x5e, 0xc9, 0xad, 0xb2, 0x88, 0xa1, 0xf5, 0xda,
	0xc7, 0x8d, 0x82, 0xb4, 0x85, 0xee, 0x65, 0xe1, 0x63, 0x65, 0x64, 0x28, 0x3a, 0xa5, 0x8a, 0xdb,
	0xe7, 0xf4, 0x50, 0xf6, 0x59, 0x43, 0x0f, 0x1d, 0x19, 0x6d, 0xe3, 0x68, 0x94, 0x39, 0x74, 0x13,
	0x35, 0x38, 0x36, 0xd0, 0x0c, 0x43, 0x6f, 0xf7, 0x94, 0x1e, 0x39, 0x99, 0x9c, 0xc3, 0xd1, 0x61,
	0x5b, 0x8f, 0xe1, 0x7c, 0xc6, 0xb8, 0xdd, 0xef, 0x73, 0xb4, 0x90, 0x41, 0xbb, 0xed, 0x41, 0x57,
	0xe9, 0xf7, 0x09, 0x5a, 0xdc, 0x56, 0xe9, 0x0c, 0xe2, 0xed, 0x9c, 0x4a, 0x34, 0xd4, 0xb5, 0xde,
	0x51, 0xd7, 0x10, 0xb5, 0x8c, 0x41, 0xe5, 0xd5, 0x91, 0x6a, 0x1c, 0x33, 0x2d, 0x63, 0x6c, 0xff,
	0xc8, 0x38, 0xd2, 0x95, 0x51, 0x23, 0xbf, 0x0d, 0x93, 0x32, 0x79, 0xc1, 0xf4, 0x72, 0x43, 0x5d,
	0xed, 0x2a, 0xc6, 0xf1, 0x50, 0xa1, 0xee, 0xb4, 0x01, 0xb8, 0x6b, 0xa2, 0xcd, 0x14, 0xee, 0xab,
	0x87, 0xaa, 0x01, 0x4b, 0xe2, 0x94, 0xc8, 0x93, 0x32, 0x87, 0x6d, 0xfd, 0xa5, 0xc2, 0xa9, 0xfc,
	0xf6, 0x9f, 0xef, 0xf4, 0x67, 0x38, 0x82, 0xf8, 0x22, 0x72, 0xa8, 0xfb, 0x6a, 0xb7, 0xbd, 0x54,
	0x00, 0x8f, 0xd0, 0x03, 0x81, 0x01, 0x15, 0xde, 0xa8, 0xfd, 0x7e, 0x47, 0x39, 0x50, 0x69, 0xd2,
	0x1e, 0xa2, 0x2d, 0xc1, 0xe0, 0x40, 0x33, 0xba, 0xda, 0x80, 0x98, 0x75, 0x0d, 0x12, 0x8b, 0xf4,
	0x1f, 0xf4, 0x50, 0xa0, 0x61, 0xdb, 0xab, 0x23, 0x45, 0x3f, 0xd6, 0xf4, 0x9e, 0xa2, 0x8f, 0x88,
	0x9e, 0xcb, 0x47, 0x28, 0x83, 0x5e, 0xd6, 0xa0, 0x28, 0xfd, 0x17, 0x3d, 0xba, 0xc6, 0xc7, 0x50,
	0x1b, 0xa9, 0x14, 0x6a, 0x94, 0xde, 0x39, 0x28, 0xf6, 0x92, 0x98, 0x94, 0xf7, 0x7e, 0x29, 0xc2,
	0xdb, 0x61, 0xbd, 0x6b, 0x84, 0x83, 0x33, 0xda, 0x62, 0x9f, 0xa3, 0x22, 0x9d, 0x0c, 0xd2, 0x3d,
	0xb1, 0x7f, 0xf2, 0x61, 0xd1, 0xba, 0x1a, 0x96, 0xef, 0x48, 0x3d, 0x54, 0xcb, 0xf4, 0x13, 0xe9,
	0x81, 0x60, 0x27, 0x76, 0x9a, 0xd6, 0xe6, 0x0e, 0xfb, 0x1f, 0x61, 0x27, 0xfe, 0x1f, 0x61, 0xa7,
	0xed, 0x5d, 0xca, 0x77, 0x3e, 0xcd, 0x91, 0x6f, 0x84, 0x7a, 0xcf, 0x09, 0xad, 0x8c, 0xa3, 0x0d,
	0xc1, 0x11, 0xfd, 0x83, 0xa1, 0xf5, 0x2e, 0x44, 0xce, 0x57, 0x51, 0x2d, 0xd3, 0x05, 0x96, 0xce,
	0x17, 0xfb, 0x43, 0x6b, 0x6b, 0xf9, 0x72, 0xc9, 0xc7, 0x0e, 0x5c, 0xa2, 0x87, 0xaa, 0x49, 0xcb,
	0x96, 0x44, 0xdb, 0xec, 0x5c, 0x6b, 0xb5, 0xae, 0xa3, 0xc2, 0x39, 0xb9, 0xd0, 0xd7, 0x44, 0x90,
	0xb4, 0x8f, 0x2f, 0x0b, 0x22, 0x74, 0xf8, 0xab, 0x23, 0x7a, 0x8e, 0x56, 0x5f, 0x2d, 0x70, 0x70,
	0xc9, 0x3f, 0x9c, 0x6f, 0xac, 0xc4, 0x17, 0x68, 0x0d, 0xf6, 0xc5, 0xdf, 0xdf, 0x37, 0xde, 0xf8,
	0x39, 0xaa, 0xc1, 0x46, 0xb8, 0x56, 0x78, 0xd3, 0x6d, 0x9d, 0x8f, 0xbf, 0xf9, 0xff, 0xd4, 0x89,
	0x4e, 0x16, 0xe3, 0x1d, 0xf2, 0x2d, 0xbd, 0x1b, 0x2e, 0xbc, 0x73, 0xd2, 0x50, 0x67, 0x78, 0x97,
	0x98, 0xfa, 0xbb, 0xe6, 0xdc, 0xd9, 0x4d, 0xf6, 0x8c, 0xcb, 0x90, 0xf0, 0xcf, 0xfe, 0x0a, 0x00,
	0x00, 0xff, 0xff, 0x06, 0xa5, 0x1e, 0xa1, 0x64, 0x12, 0x00, 0x00,
}
