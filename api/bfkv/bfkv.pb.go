// Code generated by protoc-gen-go.
// source: bfkv.proto
// DO NOT EDIT!

/*
Package bfkv is a generated protocol buffer package.

It is generated from these files:
	bfkv.proto

It has these top-level messages:
*/
package bfkv

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bfgateway "github.com/sunwangme/bfgo/api/bfgateway"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for BfKvService service

type BfKvServiceClient interface {
	// 活跃检测
	Ping(ctx context.Context, in *bfgateway.BfPingData, opts ...grpc.CallOption) (*bfgateway.BfPingData, error)
	// stream测试
	PingStreamCS(ctx context.Context, opts ...grpc.CallOption) (BfKvService_PingStreamCSClient, error)
	PingStreamC(ctx context.Context, opts ...grpc.CallOption) (BfKvService_PingStreamCClient, error)
	PingStreamS(ctx context.Context, in *google_protobuf.Any, opts ...grpc.CallOption) (BfKvService_PingStreamSClient, error)
	// Kv服务
	SetKv(ctx context.Context, in *bfgateway.BfKvData, opts ...grpc.CallOption) (*bfgateway.BfVoid, error)
	GetKv(ctx context.Context, in *bfgateway.BfKvData, opts ...grpc.CallOption) (*bfgateway.BfKvData, error)
}

type bfKvServiceClient struct {
	cc *grpc.ClientConn
}

func NewBfKvServiceClient(cc *grpc.ClientConn) BfKvServiceClient {
	return &bfKvServiceClient{cc}
}

func (c *bfKvServiceClient) Ping(ctx context.Context, in *bfgateway.BfPingData, opts ...grpc.CallOption) (*bfgateway.BfPingData, error) {
	out := new(bfgateway.BfPingData)
	err := grpc.Invoke(ctx, "/bfkv.BfKvService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfKvServiceClient) PingStreamCS(ctx context.Context, opts ...grpc.CallOption) (BfKvService_PingStreamCSClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BfKvService_serviceDesc.Streams[0], c.cc, "/bfkv.BfKvService/PingStreamCS", opts...)
	if err != nil {
		return nil, err
	}
	x := &bfKvServicePingStreamCSClient{stream}
	return x, nil
}

type BfKvService_PingStreamCSClient interface {
	Send(*google_protobuf.Any) error
	Recv() (*google_protobuf.Any, error)
	grpc.ClientStream
}

type bfKvServicePingStreamCSClient struct {
	grpc.ClientStream
}

func (x *bfKvServicePingStreamCSClient) Send(m *google_protobuf.Any) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bfKvServicePingStreamCSClient) Recv() (*google_protobuf.Any, error) {
	m := new(google_protobuf.Any)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bfKvServiceClient) PingStreamC(ctx context.Context, opts ...grpc.CallOption) (BfKvService_PingStreamCClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BfKvService_serviceDesc.Streams[1], c.cc, "/bfkv.BfKvService/PingStreamC", opts...)
	if err != nil {
		return nil, err
	}
	x := &bfKvServicePingStreamCClient{stream}
	return x, nil
}

type BfKvService_PingStreamCClient interface {
	Send(*google_protobuf.Any) error
	CloseAndRecv() (*google_protobuf.Any, error)
	grpc.ClientStream
}

type bfKvServicePingStreamCClient struct {
	grpc.ClientStream
}

func (x *bfKvServicePingStreamCClient) Send(m *google_protobuf.Any) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bfKvServicePingStreamCClient) CloseAndRecv() (*google_protobuf.Any, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(google_protobuf.Any)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bfKvServiceClient) PingStreamS(ctx context.Context, in *google_protobuf.Any, opts ...grpc.CallOption) (BfKvService_PingStreamSClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BfKvService_serviceDesc.Streams[2], c.cc, "/bfkv.BfKvService/PingStreamS", opts...)
	if err != nil {
		return nil, err
	}
	x := &bfKvServicePingStreamSClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BfKvService_PingStreamSClient interface {
	Recv() (*google_protobuf.Any, error)
	grpc.ClientStream
}

type bfKvServicePingStreamSClient struct {
	grpc.ClientStream
}

func (x *bfKvServicePingStreamSClient) Recv() (*google_protobuf.Any, error) {
	m := new(google_protobuf.Any)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bfKvServiceClient) SetKv(ctx context.Context, in *bfgateway.BfKvData, opts ...grpc.CallOption) (*bfgateway.BfVoid, error) {
	out := new(bfgateway.BfVoid)
	err := grpc.Invoke(ctx, "/bfkv.BfKvService/SetKv", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfKvServiceClient) GetKv(ctx context.Context, in *bfgateway.BfKvData, opts ...grpc.CallOption) (*bfgateway.BfKvData, error) {
	out := new(bfgateway.BfKvData)
	err := grpc.Invoke(ctx, "/bfkv.BfKvService/GetKv", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BfKvService service

type BfKvServiceServer interface {
	// 活跃检测
	Ping(context.Context, *bfgateway.BfPingData) (*bfgateway.BfPingData, error)
	// stream测试
	PingStreamCS(BfKvService_PingStreamCSServer) error
	PingStreamC(BfKvService_PingStreamCServer) error
	PingStreamS(*google_protobuf.Any, BfKvService_PingStreamSServer) error
	// Kv服务
	SetKv(context.Context, *bfgateway.BfKvData) (*bfgateway.BfVoid, error)
	GetKv(context.Context, *bfgateway.BfKvData) (*bfgateway.BfKvData, error)
}

func RegisterBfKvServiceServer(s *grpc.Server, srv BfKvServiceServer) {
	s.RegisterService(&_BfKvService_serviceDesc, srv)
}

func _BfKvService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bfgateway.BfPingData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfKvServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfkv.BfKvService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfKvServiceServer).Ping(ctx, req.(*bfgateway.BfPingData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfKvService_PingStreamCS_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BfKvServiceServer).PingStreamCS(&bfKvServicePingStreamCSServer{stream})
}

type BfKvService_PingStreamCSServer interface {
	Send(*google_protobuf.Any) error
	Recv() (*google_protobuf.Any, error)
	grpc.ServerStream
}

type bfKvServicePingStreamCSServer struct {
	grpc.ServerStream
}

func (x *bfKvServicePingStreamCSServer) Send(m *google_protobuf.Any) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bfKvServicePingStreamCSServer) Recv() (*google_protobuf.Any, error) {
	m := new(google_protobuf.Any)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BfKvService_PingStreamC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BfKvServiceServer).PingStreamC(&bfKvServicePingStreamCServer{stream})
}

type BfKvService_PingStreamCServer interface {
	SendAndClose(*google_protobuf.Any) error
	Recv() (*google_protobuf.Any, error)
	grpc.ServerStream
}

type bfKvServicePingStreamCServer struct {
	grpc.ServerStream
}

func (x *bfKvServicePingStreamCServer) SendAndClose(m *google_protobuf.Any) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bfKvServicePingStreamCServer) Recv() (*google_protobuf.Any, error) {
	m := new(google_protobuf.Any)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BfKvService_PingStreamS_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf.Any)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BfKvServiceServer).PingStreamS(m, &bfKvServicePingStreamSServer{stream})
}

type BfKvService_PingStreamSServer interface {
	Send(*google_protobuf.Any) error
	grpc.ServerStream
}

type bfKvServicePingStreamSServer struct {
	grpc.ServerStream
}

func (x *bfKvServicePingStreamSServer) Send(m *google_protobuf.Any) error {
	return x.ServerStream.SendMsg(m)
}

func _BfKvService_SetKv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bfgateway.BfKvData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfKvServiceServer).SetKv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfkv.BfKvService/SetKv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfKvServiceServer).SetKv(ctx, req.(*bfgateway.BfKvData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfKvService_GetKv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bfgateway.BfKvData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfKvServiceServer).GetKv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfkv.BfKvService/GetKv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfKvServiceServer).GetKv(ctx, req.(*bfgateway.BfKvData))
	}
	return interceptor(ctx, in, info, handler)
}

var _BfKvService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bfkv.BfKvService",
	HandlerType: (*BfKvServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _BfKvService_Ping_Handler,
		},
		{
			MethodName: "SetKv",
			Handler:    _BfKvService_SetKv_Handler,
		},
		{
			MethodName: "GetKv",
			Handler:    _BfKvService_GetKv_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PingStreamCS",
			Handler:       _BfKvService_PingStreamCS_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PingStreamC",
			Handler:       _BfKvService_PingStreamC_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PingStreamS",
			Handler:       _BfKvService_PingStreamS_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4a, 0xcb, 0x2e,
	0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0xa5, 0xf8, 0x93, 0xd2, 0xd2, 0x13,
	0x4b, 0x52, 0xcb, 0x13, 0x2b, 0x21, 0xc2, 0x52, 0x92, 0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa,
	0x60, 0x5e, 0x52, 0x69, 0x9a, 0x7e, 0x62, 0x1e, 0x54, 0xca, 0xe8, 0x2d, 0x13, 0x17, 0xb7, 0x53,
	0x9a, 0x77, 0x59, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa, 0x90, 0x19, 0x17, 0x4b, 0x40, 0x66,
	0x5e, 0xba, 0x90, 0xa8, 0x1e, 0xc2, 0x10, 0xa7, 0x34, 0x90, 0x90, 0x4b, 0x62, 0x49, 0xa2, 0x14,
	0x76, 0x61, 0x25, 0x06, 0x21, 0x07, 0x2e, 0x1e, 0x10, 0x2f, 0xb8, 0xa4, 0x28, 0x35, 0x31, 0xd7,
	0x39, 0x58, 0x48, 0x44, 0x0f, 0x62, 0xa7, 0x1e, 0xcc, 0x4e, 0x3d, 0xc7, 0xbc, 0x4a, 0x29, 0xac,
	0xa2, 0x4a, 0x0c, 0x1a, 0x8c, 0x06, 0x8c, 0x42, 0xb6, 0x5c, 0xdc, 0x48, 0x26, 0x90, 0x6a, 0x00,
	0xaa, 0x76, 0x12, 0xed, 0x07, 0xda, 0x6e, 0xc8, 0xc5, 0x1a, 0x9c, 0x5a, 0xe2, 0x5d, 0x26, 0x24,
	0x8c, 0xe2, 0x43, 0xef, 0x32, 0xb0, 0xb7, 0x05, 0x51, 0x04, 0xc3, 0xf2, 0x33, 0x53, 0x80, 0x5e,
	0x36, 0xe6, 0x62, 0x75, 0xc7, 0xad, 0x05, 0x9b, 0xa0, 0x12, 0x83, 0x93, 0x4a, 0x94, 0x52, 0x7a,
	0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x71, 0x69, 0x5e, 0x79, 0x62, 0x5e,
	0x7a, 0x6e, 0xaa, 0x3e, 0x50, 0x71, 0xbe, 0x7e, 0x62, 0x41, 0xa6, 0x3e, 0x28, 0x06, 0x93, 0xd8,
	0xc0, 0xee, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf6, 0xa5, 0x91, 0xef, 0xdc, 0x01, 0x00,
	0x00,
}
